// -*- c++ -*-

#ifndef _LIBCPP_TYPE_TRAITS
#define _LIBCPP_TYPE_TRAITS

namespace std {
	// helper classes
	template <class T, T v>
	struct integral_constant {
		typedef T value_type;
		typedef std::integral_constant<T, v> type;

	public:
		static constexpr T value = v;
		constexpr operator value_type() const noexcept {
			return value;
		}

		constexpr value_type operator()() const noexcept {
			return value;
		}
	};

	template <bool B>
	using bool_constant = integral_constant<bool, B>;

	using true_type = std::integral_constant<bool, true>;
	using false_type = std::integral_constant<bool, false>;

	// references
	template <class T>
	struct remove_reference {
		typedef T type;
	};

	template <class T>
	struct remove_reference<T&> {
		typedef T type;
	};

	template <class T>
	struct remove_reference<T&&> {
		typedef T type;
	};

	template <class T>
	using remove_reference_t = typename remove_reference<T>::type;

} // namespace std

#endif
